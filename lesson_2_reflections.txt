What happens when you initialize a repository? Why do you need to do it?

	When you write 
	$ git init
	in your directory, git creates a hidden folder called '.git', where 
	history and other important data is saved. There are also some system
	files for git to make it work.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	It helps you to separate your changes in a project into logical parts.
	Staging area is 'buffer' between the working directory and a commit.

How can you use the staging area to make sure you have one commit per logical
change?

	Changes may be in different files, so it's important to have an opportunity
	to saparate these files during making commits. Just make your changes,
	git add FileYouNeed to the staging area and commit!

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	It's perfect when you want to make an experiment with your progmramm. 
	Moreover, if an experiment is successful you can merge your changes to
	the master branch.

How do the diagrams help you visualize the branch structure?

	Branches is one the most convinient ways of seeing all the changes on
	their places. It's easy to see which changes were made in parallel 
	and help you decide wether can you merge branches or not.
	Commands to use:
	1) To show a tree of commits:
	$ git log --graph --oneline branch1 branch2
	2) To save commint in a new branch:
	$ git checkout -b NewBranchName
	It is equel to:
	$ git branch NewBranchName
	$ git checkout NewBranchName

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	The result of merging is merging.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Depending on changes sometimes it's possible or not to decide 100% for
	sure how to merge files. If no, you only the developer can make a right
	decision.
